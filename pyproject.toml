[build-system]
requires = ["setuptools>=64", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "glimmer"
dynamic = ["version"]  # Remove hardcoded version for auto-versioning
authors = [
    {name = "Immanuel Weber", email = "immanuel.weber@gmail.com"}
]
description = "Utilities for working with PyTorch and PyTorch Lightning"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["pytorch", "lightning", "ml", "utilities", "deep-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "numpy>=1.20",
    "pandas>=1.3",
    "matplotlib>=3.4",
    "ipython>=7.0",
    "torch>=1.11",
    "pytorch-lightning>=1.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
]

[project.urls]
Homepage = "https://github.com/immanuelweber/glimmer-utils"
Repository = "https://github.com/immanuelweber/glimmer-utils"
Issues = "https://github.com/immanuelweber/glimmer-utils/issues"

# Automatic versioning from git tags
[tool.setuptools_scm]
write_to = "glimmer/_version.py"

[tool.setuptools.packages.find]
include = ["glimmer*"]
exclude = ["tests*"]

# Ruff configuration (replaces black + isort + flake8)
[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "TID", # flake8-tidy-imports
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B905",  # zip() strict parameter (Python 3.10+, nice-to-have)
    "E402",  # module import not at top (needed for test mocking)
]
fixable = ["E", "F", "I", "UP", "C4"]   # add UP & C4
unfixable = ["F403", "F405", "B", "N"]    # keep bugbear & naming read-only

[tool.ruff.lint.isort]
known-first-party = ["glimmer"]
force-single-line = false
required-imports = []

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short"

# Coverage configuration
[tool.coverage.run]
source = ["glimmer"]
omit = ["tests/*"]
